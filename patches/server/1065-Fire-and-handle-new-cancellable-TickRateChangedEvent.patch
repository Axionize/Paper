From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Axionize <154778082+Axionize@users.noreply.github.com>
Date: Tue, 8 Oct 2024 20:32:34 -0400
Subject: [PATCH] Fire and handle new cancellable TickRateChangedEvent


diff --git a/src/main/java/net/minecraft/server/ServerTickRateManager.java b/src/main/java/net/minecraft/server/ServerTickRateManager.java
index 37dcf3dc3e50afd85912a7496c828576a38a4e9c..6933b3f5e66ca4dd1482fcb17661ed0fe5ded8e0 100644
--- a/src/main/java/net/minecraft/server/ServerTickRateManager.java
+++ b/src/main/java/net/minecraft/server/ServerTickRateManager.java
@@ -121,13 +121,23 @@ public class ServerTickRateManager extends TickRateManager {
         this.sprintTimeSpend += System.nanoTime() - this.sprintTickStartTime;
     }
 
-    @Override
-    public void setTickRate(float tickRate) {
-        super.setTickRate(tickRate);
+    // Paper start - Fire and handle cancellable TickRateChangeEvent
+    public void setTickRate(io.papermc.paper.command.brigadier.CommandSourceStack commandSourceStack, float tickRate) {
+        org.bukkit.event.server.TickRateChangeEvent event = new org.bukkit.event.server.TickRateChangeEvent(commandSourceStack, tickRate);
+        if (!event.callEvent()) {
+            return;
+        }
+        super.setTickRate(event.getTickRate());
         this.server.onTickRateChanged();
         this.updateStateToClients();
     }
 
+    @Override
+    public void setTickRate(float tickRate) {
+        setTickRate(null, tickRate);
+    }
+    // Paper end - Fire and handle cancellable TickRateChangeEvent
+
     public void updateJoiningPlayer(ServerPlayer player) {
         player.connection.send(ClientboundTickingStatePacket.from(this));
         player.connection.send(ClientboundTickingStepPacket.from(this));
diff --git a/src/main/java/net/minecraft/server/commands/TickCommand.java b/src/main/java/net/minecraft/server/commands/TickCommand.java
index 5ce845a9cd84c355e2716dfcb0b62686c783c9f9..430f372a31bcbabb6bf91725492f45834794287f 100644
--- a/src/main/java/net/minecraft/server/commands/TickCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TickCommand.java
@@ -61,7 +61,7 @@ public class TickCommand {
 
     private static int setTickingRate(CommandSourceStack source, float rate) {
         ServerTickRateManager serverTickRateManager = source.getServer().tickRateManager();
-        serverTickRateManager.setTickRate(rate);
+        serverTickRateManager.setTickRate(source, rate); // Paper - Fire and handle cancellable TickRateChangeEvent
         String string = String.format("%.1f", rate);
         source.sendSuccess(() -> Component.translatable("commands.tick.rate.success", string), true);
         return (int)rate;
